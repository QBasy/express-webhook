// auth-check.js - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ë–ï–ó –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
(function() {
    const apiBase = window.location.origin;
    const token = localStorage.getItem('jwt_token');
    const currentPage = window.location.pathname;

    console.log('üîç Auth check started');
    console.log('üìç Current page:', currentPage);
    console.log('üîë Has token:', !!token);

    // –°—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const publicPages = ['/login.html', '/login', '/register.html', '/register', '/health'];
    const isPublicPage = publicPages.some(page => currentPage === page || currentPage.startsWith(page));

    // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É–±–ª–∏—á–Ω–∞—è - —Ä–µ–¥–∏—Ä–µ–∫—Ç –û–î–ò–ù –†–ê–ó
    if (!token && !isPublicPage) {
        console.log('‚ùå No token, redirecting to login (ONCE)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã —É–∂–µ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
        if (!currentPage.includes('login')) {
            window.location.replace('/login.html'); // replace –≤–º–µ—Å—Ç–æ href!
        }
        return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ –º—ã –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é –û–î–ò–ù –†–ê–ó
    if (token && (currentPage === '/login.html' || currentPage === '/login' || currentPage === '/register.html' || currentPage === '/register')) {
        console.log('‚úÖ Already logged in, redirecting to home (ONCE)');
        window.location.replace('/'); // replace –≤–º–µ—Å—Ç–æ href!
        return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ –º—ã –ù–ï –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –û–î–ò–ù –†–ê–ó
    if (token && !isPublicPage) {
        console.log('üîç Checking token validity (ONCE)...');

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.checkAuth = async function() {
            try {
                const res = await fetch(`${apiBase}/auth/me`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                console.log('üì° Auth check response:', res.status);

                if (!res.ok) {
                    console.log('‚ùå Token invalid, clearing and redirecting');
                    localStorage.removeItem('jwt_token');
                    localStorage.removeItem('user');

                    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
                    if (!window.location.pathname.includes('login')) {
                        window.location.replace('/login.html');
                    }
                    return false;
                }

                const userData = await res.json();
                console.log('‚úÖ Token valid, user:', userData.username);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('user', JSON.stringify(userData));

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                updateUserInfo(userData);

                return true;

            } catch (err) {
                console.error('‚ùå Auth check failed:', err);
                localStorage.removeItem('jwt_token');
                localStorage.removeItem('user');

                // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
                if (!window.location.pathname.includes('login')) {
                    window.location.replace('/login.html');
                }
                return false;
            }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        checkAuth();
    }

    function updateUserInfo(user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userNameEl = document.getElementById('current-user-name');
        if (userNameEl) {
            userNameEl.textContent = user.username;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
        const userRoleEl = document.getElementById('current-user-role');
        if (userRoleEl) {
            userRoleEl.textContent = user.role === 'admin' ? 'üëë Admin' : 'üë§ User';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin') {
            const adminLinkContainer = document.getElementById('admin-link-container');
            if (adminLinkContainer) {
                adminLinkContainer.innerHTML = `
                    <a href="/admin.html" class="text-purple-600 hover:text-purple-800 font-medium">
                        üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                    </a>
                `;
            }
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    window.fetchWithAuth = async function(url, options = {}) {
        const token = localStorage.getItem('jwt_token');

        if (!options.headers) {
            options.headers = {};
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º –∫—Ä–æ–º–µ –≤–µ–±—Ö—É–∫–æ–≤
        if (token && !url.includes('/hook/')) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }

        const response = await fetch(url, options);

        // –ï—Å–ª–∏ 401 - —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö, –≤—ã—Ö–æ–¥–∏–º (–ë–ï–ó –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
        if (response.status === 401 && !window.location.pathname.includes('login')) {
            console.log('‚ùå 401 Unauthorized, logging out (ONCE)');
            localStorage.removeItem('jwt_token');
            localStorage.removeItem('user');
            window.location.replace('/login.html'); // replace!
        }

        return response;
    };

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    window.logout = function() {
        console.log('üëã Logging out');
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user');
        window.location.replace('/login.html'); // replace!
    };

    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.getAuthHeaders = function() {
        const token = localStorage.getItem('jwt_token');
        return token ? { 'Authorization': `Bearer ${token}` } : {};
    };

    console.log('‚úÖ Auth check completed');
})();