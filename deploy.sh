#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}üöÄ Webhook Viewer Deployment Script${NC}"
echo "======================================"

if [ ! -f .env.production ]; then
    echo -e "${RED}‚ùå Error: .env.production not found!${NC}"
    echo "Please create .env.production file with your credentials"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Error: Docker not installed!${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Error: Docker Compose not installed!${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Copying production configs...${NC}"
cp .env.production .env
cp Dockerfile.production Dockerfile
cp docker-compose.production.yml docker-compose.yml
cp nginx.production.conf nginx.conf

if [ ! -f mongo-init.js ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: mongo-init.js not found. Creating...${NC}"
    cat > mongo-init.js << 'EOF'
db = db.getSiblingDB('webhook_viewer');

db.createUser({
  user: 'webhook_user',
  pwd: process.env.MONGO_USER_PASSWORD || 'WebhookUserPassword456!',
  roles: [
    { role: 'readWrite', db: 'webhook_viewer' },
    { role: 'dbAdmin', db: 'webhook_viewer' }
  ]
});

db.createCollection('users');
db.createCollection('rooms');
db.createCollection('webhooks');
db.createCollection('fake_errors');

print('‚úÖ Database initialized successfully');
EOF
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo -e "${YELLOW}üõë Stopping old containers...${NC}"
docker-compose down || true

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
read -p "Remove old images? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üóëÔ∏è  Removing old images...${NC}"
    docker-compose down --rmi all --volumes --remove-orphans || true
fi

# –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo -e "${YELLOW}üî® Building images...${NC}"
docker-compose build --no-cache

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üöÄ Starting containers...${NC}"
docker-compose up -d

# –ñ–¥–µ–º –ø–æ–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è
echo -e "${YELLOW}‚è≥ Waiting for services to start...${NC}"
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo -e "${YELLOW}üìä Checking services status...${NC}"
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health
echo -e "${YELLOW}üè• Checking health endpoints...${NC}"
sleep 5

if curl -f http://localhost/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Health check passed!${NC}"
else
    echo -e "${RED}‚ùå Health check failed!${NC}"
    echo -e "${YELLOW}Checking logs...${NC}"
    docker-compose logs webhook-app
    exit 1
fi

echo -e "${YELLOW}üìú Last logs:${NC}"
docker-compose logs --tail=20

echo ""
echo -e "${GREEN}======================================"
echo -e "‚úÖ Deployment completed successfully!"
echo -e "======================================${NC}"
echo ""
echo "üìç Services:"
echo "   - Webhook Viewer: http://localhost"
echo "   - Admin Panel:    http://localhost/admin.html"
echo "   - Login:          http://localhost/login.html"
echo "   - Health Check:   http://localhost/health"
echo ""
echo "üîß Useful commands:"
echo "   - View logs:      docker-compose logs -f"
echo "   - Stop services:  docker-compose down"
echo "   - Restart:        docker-compose restart"
echo "   - Shell:          docker exec -it webhook-app sh"
echo ""
echo "üîê Default admin: admin / admin"
echo "‚ö†Ô∏è  CHANGE DEFAULT PASSWORD IN PRODUCTION!"
echo ""

read -p "Show live logs? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose logs -f
fi